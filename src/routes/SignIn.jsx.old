import React, { useState } from 'react'
import { useEffect } from 'react';
import { AiOutlineMail } from "react-icons/ai"
import { RiLockPasswordLine } from "react-icons/ri"
import { Link, useNavigate } from "react-router-dom"
import { signIn, UserAuth } from "../context/AuthContext.jsx.old"
import { getAuth, signInWithPopup, GoogleAuthProvider } from "firebase/auth";
import { useLocation } from "react-router-dom";



function SignIn() {
    const provider = new GoogleAuthProvider();
    const location = useLocation();
    const auth = getAuth();
    const [count, setCount] = useState(0);
    const navigate = useNavigate()
    const [redirectUrl, setRedirectUrl] = useState('');
    const storedUrl = localStorage.getItem('redirect_url');

    useEffect(() => {
        // Check if there is a redirect URL in local storage
        const storedUrl = localStorage.getItem('redirect_url');
        if (storedUrl) {
            // Update the redirect URL state
            setRedirectUrl(storedUrl);
        }
    }, []);
    let displayed;
    if (location.state && location.state.from === "/") {
        console.log(location.state)
        console.log(location.state.from)
        displayed =
            <div className='flex justify-center items-center'>
                <h1 className='text-color font-semibold text-3xl'>Sign in to start summarizing with Alphy!</h1>
            </div>
    }
    else {
        displayed = <div className='flex justify-center items-center'>  </div>
    }

    const handleClick = () => {
        signInWithPopup(auth, provider)
            .then((result) => {
                // This gives you a Google Access Token. You can use it to access the Google API.
                const credential = GoogleAuthProvider.credentialFromResult(result);
                const token = credential.accessToken;
                // The signed-in user info.
                const user = result.user;
                // ...
            }).catch((error) => {
                // Handle Errors here.
                const errorCode = error.code;
                const errorMessage = error.message;
                // The email of the user's account used.
                const email = error.customData.email;
                // The AuthCredential type that was used.
                const credential = GoogleAuthProvider.credentialFromError(error);
                // ...
            }).then(() => {
                if (storedUrl) {
                    // Redirect the user to the stored URL
                    window.location.href = storedUrl;
                    console.log(storedUrl)
                    // Remove the redirect URL from local storage
                    localStorage.removeItem('redirect_url');

                } else {
                    // Redirect the user to the home page
                    window.location.href = '/';

                }
            })



            ;

    };



    const [email, setEmail] = useState("")
    const [password, setPassword] = useState("")
    const [error, setError] = useState("")
    const { signIn } = UserAuth()

    const handleSubmit = async (e) => {
        e.preventDefault()
        setError("")
        try {
            await signIn(email, password).then(() => { navigate("/") })


        } catch (error) {
            setError(error.message)
            console.log(error.message)
        }
    }


    return (
        <div className='hey max-w-[350px] mx-auto min-h-[600px] px-4 py-20'>
            <h1 className='text-color font-semibold text-3xl flex justify-center'>Sign in</h1>
            {displayed}
            <form onSubmit={handleSubmit}>
                <div className='my-5'>
                    <label className='text-color text-xl' htmlFor="email">Email</label>
                    <div className='my-2 w-full relative rounded-2xl shadow-xl'>
                        <input onChange={(e) => setEmail(e.target.value)} className='w-full p-2 border rounded-2xl' required id='email' type="email" placeholder='Enter Email' />
                        <AiOutlineMail className='absolute right-4 top-3 text-gray-400' />
                    </div>
                </div>
                <div className='my-5'>
                    <label className='text-color text-xl' htmlFor="password">Password</label>
                    <div className='my-2 w-full relative rounded-2xl shadow-xl'>
                        <input onChange={(e) => setPassword(e.target.value)} className='w-full p-2 border rounded-2xl' required id='password' type="password" placeholder='Enter Password' />
                        <RiLockPasswordLine className='absolute right-4 top-3 text-gray-400' />
                    </div>
                </div>
                <button className='sign-btn' type="submit">Sign in</button>
            </form>
            <div>

                <button onClick={handleClick}>Sign In with Google</button>
            </div>
            <p className='my-3 text-gray-500 dark:text-gray-400 text-sm'>
                Don't have an account? <Link className='text-slate-800 font-semibold dark:text-blue-200' to="/signup">Register now!</Link>
            </p>
        </div>
    )
}

export default SignIn